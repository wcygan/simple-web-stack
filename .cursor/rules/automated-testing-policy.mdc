---
description: 
globs: 
alwaysApply: true
---
# Automated Testing Policy

## Importance of Testing
After making any code changes, it is crucial to run the full suite of automated tests to ensure that:
- Existing functionality remains unaffected (no regressions).
- New functionality works as expected.
- The overall system stability is maintained.

## Procedure
1. **Implement Changes**: Make your necessary code modifications.
2. **Run Tests**: Execute the relevant automated test suites.
    - For backend changes, typically run `cargo test` within the `[backend/](mdc:backend)` directory. Consider using `deno task test:backend` as defined in `[deno.json](mdc:deno.json)` for comprehensive tests.
    - For frontend changes, ensure relevant tests are executed (refer to `[frontend/](mdc:frontend)`).
    - For end-to-end tests, use appropriate commands or CI jobs, potentially leveraging `[scripts/run-ci.ts](mdc:scripts/run-ci.ts)`.
3. **Verify Results**: Confirm that all tests pass.
4. **Debug (if necessary)**: If any tests fail, debug the issues and re-run tests until they all pass.
5. **Commit/Merge**: Only commit or merge changes once all tests are green.

## Key Testing Files
- Backend unit and integration tests can be found throughout the `[backend/src/](mdc:backend/src)` directory and specifically in `[backend/integration_test.ts](mdc:backend/integration_test.ts)`.
- Project-level task definitions, including test commands, are in `[deno.json](mdc:deno.json)`.
- The CI execution script is `[scripts/run-ci.ts](mdc:scripts/run-ci.ts)`.

Adhering to this policy helps maintain a high-quality, stable codebase and reduces the likelihood of introducing bugs.
