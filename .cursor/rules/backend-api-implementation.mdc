---
description: 
globs: 
alwaysApply: true
---
# Backend API Implementation Guidelines

This rule documents best practices and lessons learned from implementing CRUD API endpoints in the Rust/Axum backend.

## SQLx Query Patterns

### Use Runtime Queries Instead of Compile-Time Macros

When building with Docker or in CI environments where the database isn't available at compile time, use runtime queries instead of the `sqlx::query!` macro:

**❌ Don't use compile-time queries:**
```rust
let task = sqlx::query_as!(
    Task,
    r#"SELECT id as "id: Uuid", title, completed FROM tasks WHERE id = ?"#,
    task_id.to_string()
)
.fetch_one(&pool)
.await?;
```

**✅ Do use runtime queries:**
```rust
use sqlx::Row; // Important: Import the Row trait

let row = sqlx::query(
    r#"SELECT id, title, completed, created_at, updated_at FROM tasks WHERE id = ?"#
)
.bind(task_id.to_string())
.fetch_one(&pool)
.await?;

let task = Task {
    id: Uuid::parse_str(row.try_get("id")?).unwrap(),
    title: row.try_get("title")?,
    completed: row.try_get::<i8, _>("completed")? != 0, // MySQL stores bool as TINYINT
    created_at: row.try_get("created_at")?,
    updated_at: row.try_get("updated_at")?,
};
```

### Key Points:
- Import `sqlx::Row` trait to use `try_get` methods
- Handle MySQL boolean conversion: `row.try_get::<i8, _>("completed")? != 0`
- Use `bind()` for query parameters
- No need for `DATABASE_URL` at compile time

## Axum Routing Syntax

### Path Parameters Use Curly Braces

Axum uses `{param}` syntax for path parameters, not `:param`:

**❌ Incorrect:**
```rust
Router::new()
    .route("/:id", get(get_task).put(update_task).delete(delete_task))
```

**✅ Correct:**
```rust
Router::new()
    .route("/{id}", get(get_task).put(update_task).delete(delete_task))
```

### Complete Router Setup Example:
```rust
use axum::{
    routing::{delete, get, post, put},
    Router,
};

pub fn task_routes() -> Router<AppState> {
    Router::new()
        .route("/", post(create_task).get(list_tasks))
        .route("/{id}", get(get_task).put(update_task).delete(delete_task))
}

// In main.rs:
let app = Router::new()
    .route("/health", get(health_check))
    .nest("/tasks", task_routes())
    .layer(CorsLayer::permissive())
    .layer(TraceLayer::new_for_http())
    .with_state(app_state);
```

## API Testing with cURL

### Essential cURL Commands for Testing CRUD APIs

**Create (POST):**
```bash
curl -X POST http://localhost:3000/tasks \
  -H "Content-Type: application/json" \
  -d '{"title": "Test Task"}' | jq
```

**Read All (GET):**
```bash
curl http://localhost:3000/tasks | jq
```

**Read One (GET):**
```bash
curl http://localhost:3000/tasks/{uuid} | jq
```

**Update (PUT):**
```bash
curl -X PUT http://localhost:3000/tasks/{uuid} \
  -H "Content-Type: application/json" \
  -d '{"title": "Updated Task", "completed": true}' | jq
```

**Delete (DELETE):**
```bash
curl -X DELETE http://localhost:3000/tasks/{uuid} -v
```

### Testing Tips:
- Use `| jq` to pretty-print JSON responses
- Use `-v` flag for verbose output to see HTTP status codes
- Test error cases (empty strings, non-existent IDs)
- Check Docker logs: `docker logs container_name --tail 50`

## Docker Build Considerations

### Avoiding SQLx Compile-Time Issues

When using SQLx with Docker, avoid compile-time database dependencies:

1. **Don't use** `SQLX_OFFLINE=true` without prepared queries
2. **Don't pass** `DATABASE_URL` as a build argument
3. **Do use** runtime queries as shown above

Example [Dockerfile](mdc:backend/Dockerfile) structure:
```dockerfile
FROM rust:latest AS chef
# ... cargo-chef setup ...

FROM chef AS builder
# No DATABASE_URL ARG needed!
COPY . .
RUN cargo build --bin backend

FROM debian:bookworm-slim AS runtime
# Runtime DATABASE_URL provided via docker-compose
```

## Error Handling Pattern

Implement proper error handling with custom error types:

```rust
use axum::{http::StatusCode, response::IntoResponse, Json};
use serde_json::json;

#[derive(Debug)]
pub enum AppError {
    SqlxError(sqlx::Error),
    NotFound,
    ValidationError(String),
}

impl From<sqlx::Error> for AppError {
    fn from(error: sqlx::Error) -> Self {
        AppError::SqlxError(error)
    }
}

impl IntoResponse for AppError {
    fn into_response(self) -> Response {
        let (status, error_message) = match self {
            AppError::SqlxError(error) => match error {
                sqlx::Error::RowNotFound => (StatusCode::NOT_FOUND, "Resource not found".to_string()),
                _ => (StatusCode::INTERNAL_SERVER_ERROR, "Internal server error".to_string()),
            },
            AppError::NotFound => (StatusCode::NOT_FOUND, "Resource not found".to_string()),
            AppError::ValidationError(msg) => (StatusCode::BAD_REQUEST, msg),
        };

        (status, Json(json!({"error": error_message}))).into_response()
    }
}
```

## Common Pitfalls to Avoid

1. **SQLx Macros in Docker**: Don't use `query!` or `query_as!` macros when building in Docker
2. **Route Syntax**: Remember Axum uses `{id}` not `:id` for path parameters
3. **Boolean Handling**: MySQL stores booleans as TINYINT(1), convert with `!= 0`
4. **Missing Imports**: Always import `sqlx::Row` when using runtime queries
5. **CORS**: Don't forget to add `CorsLayer::permissive()` for frontend integration

## Testcontainers Integration for Fast Tests

### Shared Container Pattern for Performance

For integration tests, use a shared MySQL container across all tests rather than starting a new container per test. This reduces test suite runtime from minutes to seconds.

**❌ Don't start containers per test:**
```rust
#[tokio::test]
async fn test_something() {
    let container = Mysql::default().start().await.unwrap();
    // This takes 8+ seconds per test
}
```

**✅ Do use shared container with database isolation:**
```rust
use once_cell::sync::Lazy;
use std::sync::Mutex;

static CONTAINER: Lazy<Mutex<Option<ContainerState>>> = Lazy::new(|| Mutex::new(None));

struct ContainerState {
    _container: ContainerAsync<Mysql>,
    port: u16,
}

async fn ensure_container() -> u16 {
    let mut container_guard = CONTAINER.lock().unwrap();
    
    if let Some(ref state) = *container_guard {
        return state.port; // Reuse existing container
    }
    
    // Start container only once
    let container = Mysql::default()
        .with_env_var("MYSQL_ROOT_PASSWORD", "root")
        .with_env_var("MYSQL_USER", "test_user")
        .with_env_var("MYSQL_PASSWORD", "test_pass")
        .start()
        .await
        .expect("Failed to start MySQL container");
    
    let port = container.get_host_port_ipv4(3306).await.unwrap();
    *container_guard = Some(ContainerState { _container: container, port });
    
    port
}
```

### Database Isolation Strategy

Each test should get its own database within the shared container:

```rust
pub async fn spawn_app() -> TestApp {
    let db_port = ensure_container().await;
    
    // Create unique database for this test
    let db_name = format!("test_{}", Uuid::new_v4().to_string().replace("-", "_"));
    
    // Connect as root to create test database
    let root_pool = MySqlPoolOptions::new()
        .connect(&format!("mysql://root:root@127.0.0.1:{}/mysql", db_port))
        .await?;
    
    // Create and grant privileges
    sqlx::query(&format!("CREATE DATABASE {}", db_name)).execute(&root_pool).await?;
    sqlx::query(&format!("GRANT ALL PRIVILEGES ON {}.* TO 'test_user'@'%'", db_name))
        .execute(&root_pool).await?;
    sqlx::query("FLUSH PRIVILEGES").execute(&root_pool).await?;
    
    // Connect to test database and run migrations
    let test_pool = MySqlPoolOptions::new()
        .connect(&format!("mysql://test_user:test_pass@127.0.0.1:{}/{}", db_port, db_name))
        .await?;
    init_db(&test_pool).await?;
}
```

### Tokio Runtime Compatibility

Avoid blocking operations in async tests. Use tokio's async networking:

**❌ Don't use std blocking sockets:**
```rust
let listener = std::net::TcpListener::bind("127.0.0.1:0")?;
let server = axum::serve(tokio::net::TcpListener::from_std(listener)?, app);
```

**✅ Do use tokio async sockets:**
```rust
let listener = tokio::net::TcpListener::bind("127.0.0.1:0").await?;
let server = axum::serve(listener, app.into_make_service());
```

### Test Structure and Cleanup

Structure tests with proper setup and cleanup:

```rust
use backend::db::{AppState, init_db};
use backend::routes;

// Test helper in tests/common/mod.rs
pub struct TestApp {
    pub address: String,
    pub db_pool: MySqlPool,
    pub db_name: String,
}

impl TestApp {
    pub async fn cleanup(&self) {
        // Drop test database
        let root_url = format!("mysql://root:root@127.0.0.1:{}/mysql", db_port);
        if let Ok(root_pool) = MySqlPoolOptions::new().connect(&root_url).await {
            let _ = sqlx::query(&format!("DROP DATABASE IF EXISTS {}", self.db_name))
                .execute(&root_pool).await;
        }
        self.db_pool.close().await;
    }
}

// In test files
#[tokio::test]
async fn test_create_task() {
    let test_app = spawn_app().await;
    
    // Test logic here
    
    test_app.cleanup().await; // Always cleanup
}
```

### HTTP Status Code Testing

Be precise about expected HTTP status codes:

```rust
// Missing required fields should return 422, not 400
assert_eq!(response.status(), StatusCode::UNPROCESSABLE_ENTITY);

// Validation errors (empty strings) should return 400
assert_eq!(response.status(), StatusCode::BAD_REQUEST);

// Resource not found should return 404
assert_eq!(response.status(), StatusCode::NOT_FOUND);

// Successful creation should return 201
assert_eq!(response.status(), StatusCode::CREATED);

// Successful deletion should return 204
assert_eq!(response.status(), StatusCode::NO_CONTENT);
```

### Performance Optimization Results

With shared containers:
- **Before**: 134 seconds for 13 tests (10+ seconds per test)
- **After**: 20 seconds for 13 tests (~1.5 seconds per test)
- **Improvement**: 6.7x faster test execution

### Additional Test Performance Tips

1. **Limit test parallelism** to reduce database contention:
   ```bash
   cargo test -- --test-threads=4
   ```

2. **Run specific test suites** during development:
   ```bash
   cargo test tasks_api    # Only task tests
   cargo test health       # Only health tests
   ```

3. **Use cargo-nextest** for better test execution:
   ```bash
   cargo install cargo-nextest
   cargo nextest run
   ```

### Integration Test Dependencies

Required dependencies in [Cargo.toml](mdc:backend/Cargo.toml):

```toml
[dev-dependencies]
reqwest = { version = "0.12", features = ["json"] }
testcontainers = "0.24"
testcontainers-modules = { version = "0.12", features = ["mysql"] }
once_cell = "1"
```

Key files:
- [tests/common/mod.rs](mdc:backend/tests/common/mod.rs) - Shared test utilities
- [tests/health_check.rs](mdc:backend/tests/health_check.rs) - Health endpoint tests  
- [tests/tasks_api.rs](mdc:backend/tests/tasks_api.rs) - Complete CRUD API tests
- [src/lib.rs](mdc:backend/src/lib.rs) - Module exports for integration tests
