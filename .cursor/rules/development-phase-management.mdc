---
description: 
globs: 
alwaysApply: true
---
# Development Phase Management with PLAN.md

## Overview
The [PLAN.md](mdc:PLAN.md) file serves as the central development roadmap for the Todo List implementation. It contains a structured, phase-based approach to building the full-stack application with clear deliverables and success criteria.

## How to Use PLAN.md

### Before Starting a Development Phase

1. **Review the Current Phase**: Carefully read the specific phase section in [PLAN.md](mdc:PLAN.md) to understand:
   - Required deliverables and tasks
   - Dependencies on previous phases
   - Success criteria and validation steps
   - Key implementation notes

2. **Validate Prerequisites**: Ensure all dependencies from previous phases are completed:
   - Check that referenced files exist and are properly implemented
   - Verify that infrastructure components are running
   - Confirm that tests from previous phases are passing

3. **Plan Implementation Order**: Within each phase, follow the numbered subsections (e.g., 1.1, 1.2, 1.3) as they represent logical dependencies and optimal implementation sequence.

### During Development Phase Execution

1. **Reference Implementation Details**: Use [PLAN.md](mdc:PLAN.md) as the source of truth for:
   - File paths and naming conventions
   - Required dependencies and configurations
   - API endpoint specifications
   - Database schema requirements
   - Component structure and functionality

2. **Follow Architecture Patterns**: Adhere to the patterns outlined in the "Key Implementation Notes" section:
   - Database design principles
   - Error handling strategy
   - State management approach
   - Performance considerations

3. **Validate Against Success Criteria**: Regularly check progress against the phase-specific success criteria to ensure quality and completeness.

### After Completing a Development Phase

1. **Update Progress Tracking**: Mark completed items in [PLAN.md](mdc:PLAN.md) by:
   - Adding âœ… checkmarks to completed tasks
   - Updating the "Success Criteria" section with completion status
   - Adding any implementation notes or deviations from the original plan

2. **Document Changes**: If implementation differs from the plan:
   - Add notes explaining why changes were made
   - Update file paths or configurations if they changed
   - Modify success criteria if scope was adjusted

3. **Validate Dependencies**: Before moving to the next phase:
   - Ensure all deliverables are complete and tested
   - Verify that the next phase's dependencies are satisfied
   - Run integration tests to confirm phase completion

## Phase-Specific Guidelines

### Phase 1: Database Setup
- Focus on [backend/Cargo.toml](mdc:backend/Cargo.toml) dependencies
- Create migration files in `backend/migrations/`
- Update [backend/src/config/mod.rs](mdc:backend/src/config/mod.rs) for database configuration

### Phase 2: Backend Implementation
- Follow the handler pattern established in [backend/src/handlers/health.rs](mdc:backend/src/handlers/health.rs)
- Update [backend/src/lib.rs](mdc:backend/src/lib.rs) for router integration
- Modify [backend/src/main.rs](mdc:backend/src/main.rs) for database connectivity

### Phase 3: Frontend Implementation
- Use the component structure from [frontend/components/Button.tsx](mdc:frontend/components/Button.tsx)
- Follow the island pattern from [frontend/islands/Counter.tsx](mdc:frontend/islands/Counter.tsx)
- Update routes in [frontend/routes/](mdc:frontend/routes) directory

### Phase 4: Infrastructure Updates
- Modify [docker-compose.yml](mdc:docker-compose.yml) for new services
- Update [deno.json](mdc:deno.json) with new development tasks

### Phase 5: Testing & Validation
- Add tests following the pattern in [backend/integration_test.ts](mdc:backend/integration_test.ts)
- Validate against all success criteria in [PLAN.md](mdc:PLAN.md)

### Phase 6: Documentation & Deployment
- Update README files and API documentation
- Ensure all features match the original requirements

## Best Practices

1. **Always Read First**: Before making any changes, read the relevant section of [PLAN.md](mdc:PLAN.md) to understand the context and requirements.

2. **Incremental Updates**: Update [PLAN.md](mdc:PLAN.md) incrementally as you complete tasks, don't wait until the end of a phase.

3. **Maintain Traceability**: Keep the plan updated so that anyone can understand what has been implemented and what remains to be done.

4. **Use as Communication Tool**: [PLAN.md](mdc:PLAN.md) serves as documentation for other developers and stakeholders about project progress and architecture decisions.

5. **Validate Continuously**: Regularly check that your implementation matches the plan's specifications and success criteria.

## Integration with Architecture

The [PLAN.md](mdc:PLAN.md) file works in conjunction with the architecture guide to provide:
- **Strategic Direction**: What to build and in what order
- **Technical Specifications**: How to build it following established patterns
- **Quality Assurance**: Success criteria and validation steps
- **Progress Tracking**: Clear milestones and completion status

Always reference both [PLAN.md](mdc:PLAN.md) and the architecture guide when implementing new features to ensure consistency with the overall system design and development approach.
